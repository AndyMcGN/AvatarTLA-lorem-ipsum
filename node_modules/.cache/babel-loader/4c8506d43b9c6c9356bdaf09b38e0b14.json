{"ast":null,"code":"var _jsxFileName = \"/home/andy/Documents/Projects/typescript-avatar/src/components/TextGenerator.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { random, names, animals } from '../words';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TextGenerator = props => {\n  _s();\n\n  const [generatedText, setGeneratedText] = useState([string]);\n  const wordsArray = random.concat(animals).concat(names);\n  useEffect(() => {\n    const paragraphs = [];\n\n    for (let i = 0; i < props.paragraphs; i++) {\n      const paragraph = [];\n\n      for (let j = 0; j < 60; j++) {\n        let word = wordsArray[Math.floor(Math.random() * wordsArray.length)];\n        paragraph.push(word);\n      }\n\n      paragraphs.push(paragraph.join(' '));\n    }\n\n    setGeneratedText(paragraphs);\n    console.log(generatedText);\n  }, [props.paragraphs]);\n  const mappedText = generatedText.map(paragraph => /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"paragraph\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 56\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [props.paragraphs, generatedText]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TextGenerator, \"lI4dkg9simcVGipMNrHSmGo3T9E=\");\n\n_c = TextGenerator;\nexport default TextGenerator;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextGenerator\");","map":{"version":3,"sources":["/home/andy/Documents/Projects/typescript-avatar/src/components/TextGenerator.tsx"],"names":["React","random","names","animals","useEffect","useState","TextGenerator","props","generatedText","setGeneratedText","string","wordsArray","concat","paragraphs","i","paragraph","j","word","Math","floor","length","push","join","console","log","mappedText","map"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,OAAxB,QAAuC,UAAvC;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;AAMA,MAAMC,aAA8B,GAAIC,KAAD,IAAW;AAAA;;AAE9C,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCJ,QAAQ,CAAC,CAACK,MAAD,CAAD,CAAlD;AAEA,QAAMC,UAAwB,GAAGV,MAAM,CAACW,MAAP,CAAcT,OAAd,EAAuBS,MAAvB,CAA8BV,KAA9B,CAAjC;AAGAE,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMS,UAAc,GAAG,EAAvB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAAK,CAACM,UAA1B,EAAsCC,CAAC,EAAvC,EAA2C;AACvC,YAAMC,SAAc,GAAG,EAAvB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,YAAIC,IAAI,GAAGN,UAAU,CAACO,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACjB,MAAL,KAAgBU,UAAU,CAACS,MAAtC,CAAD,CAArB;AACAL,QAAAA,SAAS,CAACM,IAAV,CAAeJ,IAAf;AACH;;AACDJ,MAAAA,UAAU,CAACQ,IAAX,CAAgBN,SAAS,CAACO,IAAV,CAAe,GAAf,CAAhB;AACH;;AAEDb,IAAAA,gBAAgB,CAACI,UAAD,CAAhB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYhB,aAAZ;AACH,GAbQ,EAaN,CAACD,KAAK,CAACM,UAAP,CAbM,CAAT;AAeA,QAAMY,UAAU,GAAGjB,aAAa,CAACkB,GAAd,CAAkBX,SAAS,iBAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAhC,CAAnB;AAEA,sBAEI;AAAA,eACKR,KAAK,CAACM,UADX,EAEKL,aAFL;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AAOH,CA/BD;;GAAMF,a;;KAAAA,a;AAiCN,eAAeA,aAAf","sourcesContent":["import React from 'react';\nimport { random, names, animals } from '../words';\nimport { useEffect, useState } from 'react';\n\ninterface Props {\n    paragraphs: number,\n}\n\nconst TextGenerator: React.FC<Props> = (props) => {\n\n    const [generatedText, setGeneratedText] = useState([string]);\n\n    const wordsArray:Array<string> = random.concat(animals).concat(names);\n\n\n    useEffect(() => {\n        const paragraphs:any = [];\n        for (let i = 0; i < props.paragraphs; i++) {\n            const paragraph: any = [];\n            for (let j = 0; j < 60; j++) {\n                let word = wordsArray[Math.floor(Math.random() * wordsArray.length)];\n                paragraph.push(word);\n            }\n            paragraphs.push(paragraph.join(' '))\n        }\n\n        setGeneratedText(paragraphs);\n        console.log(generatedText)\n    }, [props.paragraphs]);\n\n    const mappedText = generatedText.map(paragraph => (<p>paragraph</p>))\n\n    return (\n\n        <div>\n            {props.paragraphs}\n            {generatedText}\n        </div>\n    )\n}\n\nexport default TextGenerator;"]},"metadata":{},"sourceType":"module"}