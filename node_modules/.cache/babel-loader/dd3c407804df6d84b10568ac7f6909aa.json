{"ast":null,"code":"var _jsxFileName = \"/home/andy/Documents/Projects/typescript-avatar/src/components/TextGenerator.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { random, names, animals } from '../words';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TextGenerator = props => {\n  _s();\n\n  const [generatedText, setGeneratedText] = useState(['']);\n  const wordsArray = random.concat(animals).concat(names);\n  useEffect(() => {\n    setGeneratedText(paragraphs);\n    console.log(generatedText);\n  }, [props.paragraphs]);\n\n  const makeParagraphGroup = () => {};\n\n  const makeParagraph = () => {\n    const paragraph = [];\n\n    for (let j = 0; j < 40; j++) {\n      let word = wordsArray[Math.floor(Math.random() * wordsArray.length)];\n      paragraph.push(word);\n    }\n\n    return paragraph.join(' ');\n  };\n\n  const mappedText = generatedText.map(paragraph => /*#__PURE__*/_jsxDEV(\"p\", {\n    children: paragraph\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 56\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [props.paragraphs, mappedText]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TextGenerator, \"49LmS1VoczipCLRIX/8RlUFtAo8=\");\n\n_c = TextGenerator;\nexport default TextGenerator;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextGenerator\");","map":{"version":3,"sources":["/home/andy/Documents/Projects/typescript-avatar/src/components/TextGenerator.tsx"],"names":["React","random","names","animals","useEffect","useState","TextGenerator","props","generatedText","setGeneratedText","wordsArray","concat","paragraphs","console","log","makeParagraphGroup","makeParagraph","paragraph","j","word","Math","floor","length","push","join","mappedText","map"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,OAAxB,QAAuC,UAAvC;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;AAMA,MAAMC,aAA8B,GAAIC,KAAD,IAAW;AAAA;;AAE9C,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCJ,QAAQ,CAAC,CAAC,EAAD,CAAD,CAAlD;AAEA,QAAMK,UAAwB,GAAGT,MAAM,CAACU,MAAP,CAAcR,OAAd,EAAuBQ,MAAvB,CAA8BT,KAA9B,CAAjC;AAGAE,EAAAA,SAAS,CAAC,MAAM;AAEZK,IAAAA,gBAAgB,CAACG,UAAD,CAAhB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,aAAZ;AACH,GAJQ,EAIN,CAACD,KAAK,CAACK,UAAP,CAJM,CAAT;;AAMA,QAAMG,kBAAkB,GAAG,MAAM,CAEhC,CAFD;;AAIA,QAAMC,aAAyB,GAAG,MAAM;AACpC,UAAMC,SAAmB,GAAG,EAA5B;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,UAAIC,IAAI,GAAGT,UAAU,CAACU,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACnB,MAAL,KAAgBS,UAAU,CAACY,MAAtC,CAAD,CAArB;AACAL,MAAAA,SAAS,CAACM,IAAV,CAAeJ,IAAf;AACH;;AACD,WAAOF,SAAS,CAACO,IAAV,CAAe,GAAf,CAAP;AACH,GAPD;;AASA,QAAMC,UAAU,GAAGjB,aAAa,CAACkB,GAAd,CAAkBT,SAAS,iBAAK;AAAA,cAAIA;AAAJ;AAAA;AAAA;AAAA;AAAA,UAAhC,CAAnB;AAEA,sBAEI;AAAA,eACKV,KAAK,CAACK,UADX,EAEKa,UAFL;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AAOH,CAnCD;;GAAMnB,a;;KAAAA,a;AAqCN,eAAeA,aAAf","sourcesContent":["import React from 'react';\nimport { random, names, animals } from '../words';\nimport { useEffect, useState } from 'react';\n\ninterface Props {\n    paragraphs: number,\n}\n\nconst TextGenerator: React.FC<Props> = (props) => {\n\n    const [generatedText, setGeneratedText] = useState([''])\n\n    const wordsArray:Array<string> = random.concat(animals).concat(names);\n\n\n    useEffect(() => {\n\n        setGeneratedText(paragraphs);\n        console.log(generatedText)\n    }, [props.paragraphs]);\n\n    const makeParagraphGroup = () => {\n\n    }\n\n    const makeParagraph:()=> string = () => {\n        const paragraph: string[] = [];\n        for (let j = 0; j < 40; j++) {\n            let word = wordsArray[Math.floor(Math.random() * wordsArray.length)];\n            paragraph.push(word);\n        }\n        return paragraph.join(' ')\n    }\n\n    const mappedText = generatedText.map(paragraph => (<p>{paragraph}</p>))\n\n    return (\n\n        <div>\n            {props.paragraphs}\n            {mappedText}\n        </div>\n    )\n}\n\nexport default TextGenerator;"]},"metadata":{},"sourceType":"module"}