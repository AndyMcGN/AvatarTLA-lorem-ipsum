{"ast":null,"code":"var _jsxFileName = \"/home/andy/Documents/Projects/typescript-avatar/src/components/TextGenerator.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { random, names, animals } from '../words';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TextGenerator = props => {\n  _s();\n\n  const [generatedText, setGeneratedText] = useState(['']);\n  const wordsArray = random.concat(animals).concat(names);\n  useEffect(() => {\n    const allParagraphs = makeAllParagraphs();\n    setGeneratedText(allParagraphs);\n  }, [props.paragraphs]);\n\n  const makeAllParagraphs = () => {\n    const paragraphs = [];\n\n    for (let i = 0; i < props.paragraphs; i++) {\n      const paragraph = makeParagraph();\n      paragraphs.push(paragraph);\n    }\n\n    return paragraphs;\n  };\n\n  const makeParagraph = () => {\n    const paragraph = [];\n\n    for (let j = 0; j < 40; j++) {\n      let word = wordsArray[Math.floor(Math.random() * wordsArray.length)];\n      paragraph.push(word);\n    }\n\n    return paragraph.join(' ');\n  };\n\n  const mappedText = generatedText.map(paragraph => /*#__PURE__*/_jsxDEV(\"p\", {\n    children: paragraph\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 56\n  }, this));\n\n  const handleChange = () => {\n    document.querySelector('');\n    document.execCommand(\"copy\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"generatedText\",\n    children: [mappedText, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        handleChange(1);\n      },\n      children: \"Copy text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TextGenerator, \"49LmS1VoczipCLRIX/8RlUFtAo8=\");\n\n_c = TextGenerator;\nexport default TextGenerator;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextGenerator\");","map":{"version":3,"sources":["/home/andy/Documents/Projects/typescript-avatar/src/components/TextGenerator.tsx"],"names":["React","random","names","animals","useEffect","useState","TextGenerator","props","generatedText","setGeneratedText","wordsArray","concat","allParagraphs","makeAllParagraphs","paragraphs","i","paragraph","makeParagraph","push","j","word","Math","floor","length","join","mappedText","map","handleChange","document","querySelector","execCommand"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,OAAxB,QAAuC,UAAvC;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;AAMA,MAAMC,aAA8B,GAAIC,KAAD,IAAW;AAAA;;AAE9C,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCJ,QAAQ,CAAC,CAAC,EAAD,CAAD,CAAlD;AAEA,QAAMK,UAAwB,GAAGT,MAAM,CAACU,MAAP,CAAcR,OAAd,EAAuBQ,MAAvB,CAA8BT,KAA9B,CAAjC;AAGAE,EAAAA,SAAS,CAAC,MAAM;AAEZ,UAAMQ,aAAa,GAAGC,iBAAiB,EAAvC;AACAJ,IAAAA,gBAAgB,CAACG,aAAD,CAAhB;AAEH,GALQ,EAKN,CAACL,KAAK,CAACO,UAAP,CALM,CAAT;;AAOA,QAAMD,iBAAiB,GAAG,MAAM;AAE5B,UAAMC,UAAmB,GAAG,EAA5B;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAAK,CAACO,UAA1B,EAAsCC,CAAC,EAAvC,EAA2C;AACvC,YAAMC,SAAS,GAAGC,aAAa,EAA/B;AACAH,MAAAA,UAAU,CAACI,IAAX,CAAgBF,SAAhB;AACH;;AAED,WAAOF,UAAP;AACH,GATD;;AAWA,QAAMG,aAAa,GAAG,MAAM;AACxB,UAAMD,SAAmB,GAAG,EAA5B;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,UAAIC,IAAI,GAAGV,UAAU,CAACW,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACpB,MAAL,KAAgBS,UAAU,CAACa,MAAtC,CAAD,CAArB;AACAP,MAAAA,SAAS,CAACE,IAAV,CAAeE,IAAf;AACH;;AACD,WAAOJ,SAAS,CAACQ,IAAV,CAAe,GAAf,CAAP;AACH,GAPD;;AASA,QAAMC,UAAU,GAAGjB,aAAa,CAACkB,GAAd,CAAkBV,SAAS,iBAAK;AAAA,cAAIA;AAAJ;AAAA;AAAA;AAAA;AAAA,UAAhC,CAAnB;;AAEA,QAAMW,YAAY,GAAG,MAAM;AACvBC,IAAAA,QAAQ,CAACC,aAAT,CAAuB,EAAvB;AAEAD,IAAAA,QAAQ,CAACE,WAAT,CAAqB,MAArB;AAEH,GALD;;AAOA,sBACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,eACKL,UADL,eAEI;AAAQ,MAAA,OAAO,EAAE,MAAM;AAACE,QAAAA,YAAY,CAAC,CAAD,CAAZ;AAAgB,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CAlDD;;GAAMrB,a;;KAAAA,a;AAoDN,eAAeA,aAAf","sourcesContent":["import React from 'react';\nimport { random, names, animals } from '../words';\nimport { useEffect, useState } from 'react';\n\ninterface Props {\n    paragraphs: number,\n}\n\nconst TextGenerator: React.FC<Props> = (props) => {\n\n    const [generatedText, setGeneratedText] = useState(['']);\n\n    const wordsArray:Array<string> = random.concat(animals).concat(names);\n\n\n    useEffect(() => {\n\n        const allParagraphs = makeAllParagraphs();\n        setGeneratedText(allParagraphs);\n\n    }, [props.paragraphs]);\n\n    const makeAllParagraphs = () => {\n\n        const paragraphs:string[] = [];\n        for (let i = 0; i < props.paragraphs; i++) {\n            const paragraph = makeParagraph();\n            paragraphs.push(paragraph);\n        }\n\n        return paragraphs;\n    }\n\n    const makeParagraph = () => {\n        const paragraph: string[] = [];\n        for (let j = 0; j < 40; j++) {\n            let word = wordsArray[Math.floor(Math.random() * wordsArray.length)];\n            paragraph.push(word);\n        }\n        return paragraph.join(' ');\n    }\n\n    const mappedText = generatedText.map(paragraph => (<p>{paragraph}</p>));\n\n    const handleChange = () => {\n        document.querySelector('')\n\n        document.execCommand(\"copy\");\n\n    }\n\n    return (\n        <div className=\"generatedText\">\n            {mappedText}\n            <button onClick={() => {handleChange(1)}}>Copy text</button>\n\n        </div>\n    )\n}\n\nexport default TextGenerator;"]},"metadata":{},"sourceType":"module"}