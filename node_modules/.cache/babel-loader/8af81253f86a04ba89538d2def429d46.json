{"ast":null,"code":"var _jsxFileName = \"/home/andy/Documents/Projects/typescript-avatar/src/components/TextGenerator.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { random, names, animals } from '../words';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TextGenerator = props => {\n  _s();\n\n  const [generatedText, setGeneratedText] = useState('');\n  const wordsArray = random.concat(animals).concat(names);\n  useEffect(() => {\n    const paragraphs = [];\n\n    for (let i = 0; i < props.paragraphs; i++) {\n      paragraph = [];\n\n      for (let j = 0; j < 100; j++) {\n        let word = wordsArray[Math.floor(Math.random() * wordsArray.length)];\n        paragraph.push(word);\n      } // console.log(paragraph.join(' '));\n\n    }\n\n    setGeneratedText('paragraphs.join(');\n    console.log(generatedText);\n  }, [props.paragraphs]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [props.paragraphs, generatedText]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TextGenerator, \"8iVuCU3D908IsCpHufRyqcfB7a4=\");\n\n_c = TextGenerator;\nexport default TextGenerator;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextGenerator\");","map":{"version":3,"sources":["/home/andy/Documents/Projects/typescript-avatar/src/components/TextGenerator.tsx"],"names":["React","random","names","animals","useEffect","useState","TextGenerator","props","generatedText","setGeneratedText","wordsArray","concat","paragraphs","i","paragraph","j","word","Math","floor","length","push","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,OAAxB,QAAuC,UAAvC;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;AAMA,MAAMC,aAA8B,GAAIC,KAAD,IAAW;AAAA;;AAE9C,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCJ,QAAQ,CAAC,EAAD,CAAlD;AAEA,QAAMK,UAAwB,GAAGT,MAAM,CAACU,MAAP,CAAcR,OAAd,EAAuBQ,MAAvB,CAA8BT,KAA9B,CAAjC;AAGAE,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMQ,UAAc,GAAG,EAAvB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,KAAK,CAACK,UAA1B,EAAsCC,CAAC,EAAvC,EAA2C;AACvCC,MAAAA,SAAS,GAAG,EAAZ;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC1B,YAAIC,IAAI,GAAGN,UAAU,CAACO,IAAI,CAACC,KAAL,CAAWD,IAAI,CAAChB,MAAL,KAAgBS,UAAU,CAACS,MAAtC,CAAD,CAArB;AACAL,QAAAA,SAAS,CAACM,IAAV,CAAeJ,IAAf;AACH,OALsC,CAMvC;;AACH;;AAEDP,IAAAA,gBAAgB,CAAC,kBAAD,CAAhB;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAYd,aAAZ;AACH,GAbQ,EAaN,CAACD,KAAK,CAACK,UAAP,CAbM,CAAT;AAgBA,sBAEI;AAAA,eACKL,KAAK,CAACK,UADX,EAEKJ,aAFL;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AAOH,CA9BD;;GAAMF,a;;KAAAA,a;AAgCN,eAAeA,aAAf","sourcesContent":["import React from 'react';\nimport { random, names, animals } from '../words';\nimport { useEffect, useState } from 'react';\n\ninterface Props {\n    paragraphs: number,\n}\n\nconst TextGenerator: React.FC<Props> = (props) => {\n\n    const [generatedText, setGeneratedText] = useState('');\n\n    const wordsArray:Array<string> = random.concat(animals).concat(names);\n\n\n    useEffect(() => {\n        const paragraphs:any = [];\n        for (let i = 0; i < props.paragraphs; i++) {\n            paragraph = [];\n            for (let j = 0; j < 100; j++) {\n                let word = wordsArray[Math.floor(Math.random() * wordsArray.length)];\n                paragraph.push(word);\n            }\n            // console.log(paragraph.join(' '));\n        }\n\n        setGeneratedText('paragraphs.join(');\n        console.log(generatedText)\n    }, [props.paragraphs]);\n\n\n    return (\n\n        <div>\n            {props.paragraphs}\n            {generatedText}\n        </div>\n    )\n}\n\nexport default TextGenerator;"]},"metadata":{},"sourceType":"module"}