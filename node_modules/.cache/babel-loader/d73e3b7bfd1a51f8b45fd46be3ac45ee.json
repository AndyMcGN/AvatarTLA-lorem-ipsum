{"ast":null,"code":"import _slicedToArray from\"/home/andy/Documents/Projects/typescript-avatar/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from'react';import{random,names,animals}from'../words';import{useEffect,useState}from'react';import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import{faClipboard}from'@fortawesome/free-solid-svg-icons';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var TextGenerator=function TextGenerator(props){var _useState=useState(['']),_useState2=_slicedToArray(_useState,2),generatedText=_useState2[0],setGeneratedText=_useState2[1];var wordsArray=random.concat(animals).concat(names);useEffect(function(){var allParagraphs=makeAllParagraphs();setGeneratedText(allParagraphs);},[props.paragraphs]);var makeAllParagraphs=function makeAllParagraphs(){var paragraphs=[];for(var i=0;i<props.paragraphs;i++){var paragraph=makeParagraph();paragraphs.push(paragraph);}return paragraphs;};var makeParagraph=function makeParagraph(){var paragraph=[];for(var j=0;j<40;j++){var word=wordsArray[Math.floor(Math.random()*wordsArray.length)];paragraph.push(word);}return paragraph.join(' ');};var mappedText=generatedText.map(function(paragraph){return/*#__PURE__*/_jsx(\"p\",{children:paragraph});});var copyText=function copyText(){var selectableText=document.createElement('textarea');document.body.appendChild(selectableText);selectableText.value=generatedText.join('\\n');selectableText.select();document.execCommand(\"copy\");document.body.removeChild(selectableText);};return/*#__PURE__*/_jsxs(\"div\",{className:\"generatedText\",children:[mappedText,props.paragraphs>0&&/*#__PURE__*/_jsxs(\"button\",{onClick:function onClick(){copyText();},children:[/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:faClipboard,size:\"lg\"}),\"Copy text\"]})]});};export default TextGenerator;","map":{"version":3,"sources":["/home/andy/Documents/Projects/typescript-avatar/src/components/TextGenerator.tsx"],"names":["React","random","names","animals","useEffect","useState","FontAwesomeIcon","faClipboard","TextGenerator","props","generatedText","setGeneratedText","wordsArray","concat","allParagraphs","makeAllParagraphs","paragraphs","i","paragraph","makeParagraph","push","j","word","Math","floor","length","join","mappedText","map","copyText","selectableText","document","createElement","body","appendChild","value","select","execCommand","removeChild"],"mappings":"kIAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,MAAT,CAAiBC,KAAjB,CAAwBC,OAAxB,KAAuC,UAAvC,CACA,OAASC,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,OAASC,eAAT,KAAgC,gCAAhC,CACA,OAASC,WAAT,KAA4B,mCAA5B,C,wFAOA,GAAMC,CAAAA,aAA8B,CAAG,QAAjCA,CAAAA,aAAiC,CAACC,KAAD,CAAW,CAE9C,cAA0CJ,QAAQ,CAAC,CAAC,EAAD,CAAD,CAAlD,wCAAOK,aAAP,eAAsBC,gBAAtB,eAEA,GAAMC,CAAAA,UAAwB,CAAGX,MAAM,CAACY,MAAP,CAAcV,OAAd,EAAuBU,MAAvB,CAA8BX,KAA9B,CAAjC,CAGAE,SAAS,CAAC,UAAM,CAEZ,GAAMU,CAAAA,aAAa,CAAGC,iBAAiB,EAAvC,CACAJ,gBAAgB,CAACG,aAAD,CAAhB,CAEH,CALQ,CAKN,CAACL,KAAK,CAACO,UAAP,CALM,CAAT,CAOA,GAAMD,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAM,CAE5B,GAAMC,CAAAA,UAAmB,CAAG,EAA5B,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGR,KAAK,CAACO,UAA1B,CAAsCC,CAAC,EAAvC,CAA2C,CACvC,GAAMC,CAAAA,SAAS,CAAGC,aAAa,EAA/B,CACAH,UAAU,CAACI,IAAX,CAAgBF,SAAhB,EACH,CAED,MAAOF,CAAAA,UAAP,CACH,CATD,CAWA,GAAMG,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CACxB,GAAMD,CAAAA,SAAmB,CAAG,EAA5B,CACA,IAAK,GAAIG,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAG,EAApB,CAAwBA,CAAC,EAAzB,CAA6B,CACzB,GAAIC,CAAAA,IAAI,CAAGV,UAAU,CAACW,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACtB,MAAL,GAAgBW,UAAU,CAACa,MAAtC,CAAD,CAArB,CACAP,SAAS,CAACE,IAAV,CAAeE,IAAf,EACH,CACD,MAAOJ,CAAAA,SAAS,CAACQ,IAAV,CAAe,GAAf,CAAP,CACH,CAPD,CASA,GAAMC,CAAAA,UAAU,CAAGjB,aAAa,CAACkB,GAAd,CAAkB,SAAAV,SAAS,qBAAK,mBAAIA,SAAJ,EAAL,EAA3B,CAAnB,CAEA,GAAMW,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACnB,GAAMC,CAAAA,cAAc,CAAGC,QAAQ,CAACC,aAAT,CAAuB,UAAvB,CAAvB,CACAD,QAAQ,CAACE,IAAT,CAAcC,WAAd,CAA0BJ,cAA1B,EACAA,cAAc,CAACK,KAAf,CAAuBzB,aAAa,CAACgB,IAAd,CAAmB,IAAnB,CAAvB,CACAI,cAAc,CAACM,MAAf,GACAL,QAAQ,CAACM,WAAT,CAAqB,MAArB,EACAN,QAAQ,CAACE,IAAT,CAAcK,WAAd,CAA0BR,cAA1B,EAEH,CARD,CAUA,mBACI,aAAK,SAAS,CAAC,eAAf,WACKH,UADL,CAEKlB,KAAK,CAACO,UAAN,CAAmB,CAAnB,eAAwB,gBAAQ,OAAO,CAAE,kBAAM,CAACa,QAAQ,GAAG,CAAnC,wBAAqC,KAAC,eAAD,EAAiB,IAAI,CAAEtB,WAAvB,CAAoC,IAAI,CAAC,IAAzC,EAArC,eAF7B,GADJ,CAMH,CApDD,CAsDA,cAAeC,CAAAA,aAAf","sourcesContent":["import React from 'react';\nimport { random, names, animals } from '../words';\nimport { useEffect, useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome' \nimport { faClipboard } from '@fortawesome/free-solid-svg-icons';\n\n\ninterface Props {\n    paragraphs: number,\n}\n\nconst TextGenerator: React.FC<Props> = (props) => {\n\n    const [generatedText, setGeneratedText] = useState(['']);\n\n    const wordsArray:Array<string> = random.concat(animals).concat(names);\n\n\n    useEffect(() => {\n\n        const allParagraphs = makeAllParagraphs();\n        setGeneratedText(allParagraphs);\n\n    }, [props.paragraphs]);\n\n    const makeAllParagraphs = () => {\n\n        const paragraphs:string[] = [];\n        for (let i = 0; i < props.paragraphs; i++) {\n            const paragraph = makeParagraph();\n            paragraphs.push(paragraph);\n        }\n\n        return paragraphs;\n    }\n\n    const makeParagraph = () => {\n        const paragraph: string[] = [];\n        for (let j = 0; j < 40; j++) {\n            let word = wordsArray[Math.floor(Math.random() * wordsArray.length)];\n            paragraph.push(word);\n        }\n        return paragraph.join(' ');\n    }\n\n    const mappedText = generatedText.map(paragraph => (<p>{paragraph}</p>));\n\n    const copyText = () => {\n        const selectableText = document.createElement('textarea')\n        document.body.appendChild(selectableText);\n        selectableText.value = generatedText.join('\\n');\n        selectableText.select();\n        document.execCommand(\"copy\");\n        document.body.removeChild(selectableText);\n    \n    }\n\n    return (\n        <div className=\"generatedText\">\n            {mappedText}\n            {props.paragraphs > 0 && <button onClick={() => {copyText()}}><FontAwesomeIcon icon={faClipboard} size='lg'/>Copy text</button>}\n        </div>\n    )\n}\n\nexport default TextGenerator;"]},"metadata":{},"sourceType":"module"}